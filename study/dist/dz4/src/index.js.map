{"version":3,"sources":["../../../dz4/src/index.js"],"names":["createDivWithText","text","div","document","createElement","innerHTML","createAWithHref","hrefValue","link","setAttribute","prepend","what","where","el_child","firstChild","insertBefore","findAllPSiblings","result","children","child","nextElementSibling","tagName","push","findError","innerText","deleteTextNodes","arr","childNodes","i","length","nodeType","removeChild","deleteTextNodesRecursive","childs","slice","apply","remove","collectDOMStat","root","observeChildNodes","fn"],"mappings":"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","file":"index.js","sourcesContent":["/* ДЗ 4 - работа с DOM */\n\n/**\n * Функция должна создать элемент с тегом DIV, поместить в него текстовый узел и вернуть получившийся элемент\n *\n * @param {string} text - текст, который необходимо поместить в div\n * @return {Element}\n */\nfunction createDivWithText(text) {\n    var div = document.createElement('div');\n    div.innerHTML = text;\n\n    return div;\n}\n\n/**\n * Функция должна создать элемент с тегом A, установить значение для атрибута href и вернуть получившийся элемент\n *\n * @param {string} hrefValue - значение для атрибута href\n * @return {Element}\n */\nfunction createAWithHref(hrefValue) {\n    var link = document.createElement('a');\n    link.setAttribute(\"href\", hrefValue);\n    return link;\n}\n\n/**\n * Функция должна вставлять элемент what в начало элемента where\n *\n * @param {Element} what - что вставлять\n * @param {Element} where - куда вставлять\n */\nfunction prepend(what, where) {\n    var el_child = where.firstChild;\n    where.insertBefore(what, el_child);\n}\n\n\n/**\n * Функция должна перебрать все дочерние элементы элемента where\n * и вернуть массив, состоящий из тех дочерних элементов\n * следующим соседом которых является элемент с тегом P\n * Рекурсия - по желанию\n *\n * @param {Element} where - где искать\n * @return {Array<Element>}\n *\n * @example\n * для html '<div></div><p></p><a></a><span></span><p></p>'\n * функция должна вернуть: [div, span]\n * т.к. следующим соседом этих элементов является элемент с тегом P\n */\nfunction findAllPSiblings(where) {\n    var result = [];\n    for(var child of where.children){\n        if ( child.nextElementSibling && child.nextElementSibling.tagName == \"P\") {\n            result.push( child );\n        }\n    }\n    return result;\n}\n\n/**\n * Функция должна перебрать все дочерние узлы типа \"элемент\" внутри where\n * и вернуть массив, состоящий из текстового содержимого перебираемых элементов\n * Но похоже, что в код закралась ошибка, которую нужно найти и исправить\n *\n * @param {Element} where - где искать\n * @return {Array<string>}\n */\nfunction findError(where) {\n    var result = [];\n\n    for (var child of where.children) {\n        result.push(child.innerText);\n    }\n\n    return result;\n}\n\n/**\n * Функция должна перебрать все дочерние узлы элемента where\n * и удалить из него все текстовые узлы\n * Без рекурсии!\n * Будьте внимательны при удалении узлов,\n * можно получить неожиданное поведение при переборе узлов\n *\n * @param {Element} where - где искать\n *\n * @example\n * после выполнения функции, дерево <div></div>привет<p></p>loftchool!!!\n * должно быть преобразовано в <div></div><p></p>\n */\nfunction deleteTextNodes(where) {\n    var arr = where.childNodes;\n    for(var i = 0; i < arr.length; i++){\n        if ( arr[i].nodeType == 3 ){\n            where.removeChild(arr[i]);\n        }\n    }\n}\n\n/**\n * Выполнить предудыщее задание с использование рекурсии\n * то есть необходимо заходить внутрь каждого дочернего элемента\n *\n * @param {Element} where - где искать\n *\n * @example\n * после выполнения функции, дерево <span> <div> <b>привет</b> </div> <p>loftchool</p> !!!</span>\n * должно быть преобразовано в <span><div><b></b></div><p></p></span>\n */\nfunction deleteTextNodesRecursive(where) {\n    var childs = where.childNodes\n    var arr = [].slice.apply(childs)\n    for(var i = 0; i<arr.length; i++){\n        if(arr[i].childNodes.length > 0) {\n            deleteTextNodesRecursive(arr[i])\n        }\n        if(arr[i].nodeType == 3) {\n            arr[i].remove()\n        }\n    }\n}\n\n/**\n * *** Со звездочкой ***\n * Необходимо собрать статистику по всем узлам внутри элемента root и вернуть ее в виде объекта\n * Статистика должна содержать:\n * - количество текстовых узлов\n * - количество элементов каждого класса\n * - количество элементов каждого тега\n * Для работы с классами рекомендуется использовать свойство classList\n * Постарайтесь не создавать глобальных переменных\n *\n * @param {Element} root - где собирать статистику\n * @return {{tags: Object<string, number>, classes: Object<string, number>, texts: number}}\n *\n * @example\n * для html <div class=\"some-class-1\"><b>привет!</b> <b class=\"some-class-1 some-class-2\">loftschool</b></div>\n * должен быть возвращен такой объект:\n * {\n *   tags: { DIV: 1, B: 2},\n *   classes: { \"some-class-1\": 2, \"some-class-2\": 1 },\n *   texts: 3\n * }\n */\nfunction collectDOMStat(root) {\n}\n\n/**\n * *** Со звездочкой ***\n * Функция должна отслеживать добавление и удаление элементов внутри элемента where\n * Как только в where добавляются или удаляются элемента,\n * необходимо сообщать об этом при помощи вызова функции fn со специальным аргументом\n * В качестве аргумента должен быть передан объек с двумя свойствами:\n * - type: типа события (insert или remove)\n * - nodes: массив из удаленных или добавленных элементов (а зависимости от события)\n * Отслеживание должно работать вне зависимости от глубины создаваемых/удаляемых элементов\n * Рекомендуется использовать MutationObserver\n *\n * @param {Element} where - где отслеживать\n * @param {function(info: {type: string, nodes: Array<Element>})} fn - функция, которую необходимо вызвать\n *\n * @example\n * если в where или в одного из его детей добавляется элемент div\n * то fn должна быть вызвана с аргументов:\n * {\n *   type: 'insert',\n *   nodes: [div]\n * }\n *\n * ------\n *\n * если из where или из одного из его детей удаляется элемент div\n * то fn должна быть вызвана с аргументов:\n * {\n *   type: 'remove',\n *   nodes: [div]\n * }\n */\nfunction observeChildNodes(where, fn) {\n}\n\nexport {\n    createDivWithText,\n    createAWithHref,\n    prepend,\n    findAllPSiblings,\n    findError,\n    deleteTextNodes,\n    deleteTextNodesRecursive,\n    collectDOMStat,\n    observeChildNodes\n};\n"]}