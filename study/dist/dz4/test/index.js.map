{"version":3,"sources":["../../../dz4/test/index.js"],"names":["describe","it","text","result","Element","equal","tagName","innerText","href","getAttribute","where","document","createElement","what","innerHTML","firstChild","Array","isArray","deepEqual","children","stat","tags","DIV","B","classes","texts","fn","info","type","targetInfo","nodes","length","forEach","indexOf","n","done","elementToInsert","body","appendChild","removeChild","elementToInsert1","elementToInsert2","elementToInsert3","fragment","DocumentFragment","elementToRemove","elementToRemove1","elementToRemove2","elementToRemove3"],"mappings":"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","file":"index.js","sourcesContent":["import assert from 'assert';\nimport {\n    createDivWithText,\n    createAWithHref,\n    prepend,\n    findAllPSiblings,\n    findError,\n    deleteTextNodes,\n    deleteTextNodesRecursive,\n    collectDOMStat,\n    observeChildNodes\n} from '../src/index';\n\ndescribe('ДЗ 4 - Работа с DOM', () => {\n    describe('createDivWithText', () => {\n        it('должна возвращать элемент с тегом DIV', () => {\n            let text = 'привет!';\n            let result = createDivWithText(text);\n\n            assert(result instanceof Element);\n            assert.equal(result.tagName, 'DIV');\n        });\n\n        it('должна добавлять текст в элемент', () => {\n            let text = 'привет!';\n            let result = createDivWithText(text);\n\n            assert.equal(result.innerText, text);\n        });\n    });\n\n    describe('createAWithHref', () => {\n        it('должна возвращать элемент с тегом A', () => {\n            let href = 'http://loftschool.com';\n            let result = createAWithHref(href);\n\n            assert(result instanceof Element);\n            assert.equal(result.tagName, 'A');\n        });\n\n        it('должна добавлять атрибут href', () => {\n            let href = 'http://loftschool.com';\n            let result = createAWithHref(href);\n\n            assert.equal(result.getAttribute('href'), href);\n        });\n    });\n\n    describe('prepend', () => {\n        it('должна добавлять элемента в начало', () => {\n            let where = document.createElement('div');\n            let what = document.createElement('p');\n\n            where.innerHTML = ', <b>loftschool</b>!';\n            what.innerText = 'привет';\n\n            prepend(what, where);\n\n            assert.equal(where.firstChild, what);\n            assert.equal(where.innerHTML, '<p>привет</p>, <b>loftschool</b>!');\n        });\n    });\n\n    describe('findAllPSiblings', () => {\n        it('должна возвращать массив с элементами, соседями которых являются P', () => {\n            let where = document.createElement('div');\n            let result;\n\n            where.innerHTML = '<div></div><p></p><span></span><span></span><p></p>';\n            result = findAllPSiblings(where);\n\n            assert(Array.isArray(result));\n            assert.deepEqual(result, [where.children[0], where.children[3]]);\n        });\n    });\n\n    describe('findError', () => {\n        it('должна возвращать массив из текстового содержимого элементов', () => {\n            let where = document.createElement('div');\n            let result;\n\n            where.innerHTML = ' <div>привет</div>, <div>loftschool</div>!!!';\n            result = findError(where);\n\n            assert(Array.isArray(result));\n            assert.deepEqual(result, ['привет', 'loftschool']);\n        });\n    });\n\n    describe('deleteTextNodes', () => {\n        it('должна удалить все текстовые узлы', () => {\n            let where = document.createElement('div');\n\n            where.innerHTML = ' <div></div>привет<p></p>loftchool!!!';\n            deleteTextNodes(where);\n\n            assert.equal(where.innerHTML, '<div></div><p></p>');\n        });\n    });\n\n    describe('deleteTextNodesRecursive', () => {\n        it('должна рекурсивно удалить все текстовые узлы', () => {\n            let where = document.createElement('div');\n\n            where.innerHTML = '<span> <div> <b>привет</b> </div> <p>loftchool</p> !!!</span>';\n            deleteTextNodesRecursive(where);\n\n            assert.equal(where.innerHTML, '<span><div><b></b></div><p></p></span>');\n        });\n    });\n\n    describe('collectDOMStat', () => {\n        it('должна вернуть статистику по переданному дереву', () => {\n            let where = document.createElement('div');\n            let stat = {\n                tags: { DIV: 1, B: 2 },\n                classes: { 'class-1': 2, 'class-2': 1 },\n                texts: 3\n            };\n            let result;\n\n            where.innerHTML = '<div class=\"class-1\"><b>привет!</b> <b class=\"class-1 class-2\">loftschool</b></div>';\n            result = collectDOMStat(where);\n            assert.deepEqual(result, stat);\n        });\n    });\n\n    describe('observeChildNodes', () => {\n        it('должна вызывать fn при добавлении элементов в указанный элемент', done => {\n            let where = document.createElement('div');\n            let fn = info => {\n                assert(typeof info == 'object' && info, 'info должен быть объектом');\n                assert.equal(info.type, targetInfo.type, `info.type должен быть равен ${targetInfo.type}`);\n                assert(Array.isArray(info.nodes), 'info.nodes должен быть массивом');\n                assert.equal(info.nodes.length, targetInfo.nodes.length, 'некорректный размер info.nodes');\n                targetInfo.nodes.forEach(n => assert(info.nodes.indexOf(n) > -1, 'некорректный элемент в info.nodes'));\n                done();\n            };\n            let elementToInsert = document.createElement('div');\n            let targetInfo = {\n                type: 'insert',\n                nodes: [elementToInsert]\n            };\n\n            document.body.appendChild(where);\n\n            observeChildNodes(where, fn);\n            where.appendChild(elementToInsert);\n\n            document.body.removeChild(where);\n        });\n\n        it('должна вызывать fn при добавлении множества элементов в указанный элемент', done => {\n            let where = document.createElement('div');\n            let fn = info => {\n                assert(typeof info == 'object' && info, 'info должен быть объектом');\n                assert.equal(info.type, targetInfo.type, `info.type должен быть равен ${targetInfo.type}`);\n                assert(Array.isArray(info.nodes), 'info.nodes должен быть массивом');\n                assert.equal(info.nodes.length, targetInfo.nodes.length, 'некорректный размер info.nodes');\n                targetInfo.nodes.forEach(n => assert(info.nodes.indexOf(n) > -1, 'некорректный элемент в info.nodes'));\n                done();\n            };\n            let elementToInsert1 = document.createElement('div');\n            let elementToInsert2 = document.createElement('div');\n            let elementToInsert3 = document.createElement('div');\n            let targetInfo = {\n                type: 'insert',\n                nodes: [elementToInsert1, elementToInsert2, elementToInsert3]\n            };\n            let fragment = new DocumentFragment();\n\n            document.body.appendChild(where);\n\n            fragment.appendChild(elementToInsert1);\n            fragment.appendChild(elementToInsert2);\n            fragment.appendChild(elementToInsert3);\n\n            observeChildNodes(where, fn);\n            where.appendChild(fragment);\n\n            document.body.removeChild(where);\n        });\n\n        it('должна вызывать fn при удалении элементов из указанного элемента', done => {\n            let where = document.createElement('div');\n            let fn = info => {\n                assert(typeof info == 'object' && info, 'info должен быть объектом');\n                assert.equal(info.type, targetInfo.type, `info.type должен быть равен ${targetInfo.type}`);\n                assert(Array.isArray(info.nodes), 'info.nodes должен быть массивом');\n                assert.equal(info.nodes.length, targetInfo.nodes.length, 'некорректный размер info.nodes');\n                targetInfo.nodes.forEach(n => assert(info.nodes.indexOf(n) > -1, 'некорректный элемент в info.nodes'));\n                done();\n            };\n            let elementToRemove = document.createElement('div');\n            let targetInfo = {\n                type: 'remove',\n                nodes: [elementToRemove]\n            };\n\n            document.body.appendChild(where);\n\n            where.appendChild(elementToRemove);\n            observeChildNodes(where, fn);\n            where.removeChild(elementToRemove);\n\n            document.body.removeChild(where);\n        });\n\n        it('должна вызывать fn при удалении множества элементов из указанного элемента', done => {\n            let where = document.createElement('div');\n            let fn = info => {\n                assert(typeof info == 'object' && info, 'info должен быть объектом');\n                assert.equal(info.type, targetInfo.type, `info.type должен быть равен ${targetInfo.type}`);\n                assert(Array.isArray(info.nodes), 'info.nodes должен быть массивом');\n                assert.equal(info.nodes.length, targetInfo.nodes.length, 'некорректный размер info.nodes');\n                targetInfo.nodes.forEach(n => assert(info.nodes.indexOf(n) > -1, 'некорректный элемент в info.nodes'));\n                done();\n            };\n            let elementToRemove1 = document.createElement('div');\n            let elementToRemove2 = document.createElement('div');\n            let elementToRemove3 = document.createElement('div');\n            let targetInfo = {\n                type: 'remove',\n                nodes: [elementToRemove1, elementToRemove2, elementToRemove3]\n            };\n\n            document.body.appendChild(where);\n\n            where.appendChild(elementToRemove1);\n            where.appendChild(elementToRemove2);\n            where.appendChild(elementToRemove3);\n\n            observeChildNodes(where, fn);\n            where.innerHTML = '';\n\n            document.body.removeChild(where);\n        });\n    });\n});\n"]}