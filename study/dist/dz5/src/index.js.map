{"version":3,"sources":["../../../dz5/src/index.js"],"names":["addListener","eventName","target","fn","addEventListener","removeListener","removeEventListener","skipDefault","e","preventDefault","emulateClick","click","delegate","onclick","tar","event","tagName","once"],"mappings":";;;;;AAAA;;AAEA;;;;;;;AAOA,SAASA,WAAT,CAAqBC,SAArB,EAAgCC,MAAhC,EAAwCC,EAAxC,EAA4C;AACxCD,WAAOE,gBAAP,CAAwBH,SAAxB,EAAmCE,EAAnC;AACH;;AAED;;;;;;;AAOA,SAASE,cAAT,CAAwBJ,SAAxB,EAAmCC,MAAnC,EAA2CC,EAA3C,EAA+C;AAC3CD,WAAOI,mBAAP,CAA2BL,SAA3B,EAAsCE,EAAtC;AACH;;AAED;;;;;;AAMA,SAASI,WAAT,CAAqBN,SAArB,EAAgCC,MAAhC,EAAwC;AACpCA,WAAOE,gBAAP,CAAwBH,SAAxB,EAAmC;AAAA,eAAKO,EAAEC,cAAF,EAAL;AAAA,KAAnC;AACH;;AAED;;;;;AAKA,SAASC,YAAT,CAAsBR,MAAtB,EAA8B;AAC1BA,WAAOS,KAAP;AACH;;AAED;;;;;;;AAOA,SAASC,QAAT,CAAkBV,MAAlB,EAA0BC,EAA1B,EAA8B;AAC1BD,WAAOW,OAAP,GAAiB,YAAY;AACzB,YAAIC,MAAMC,MAAMb,MAAhB,CADyB,CACD;AACxB,YAAIY,IAAIE,OAAJ,IAAe,QAAnB,EAA8B;AAC1B;AACH;AACDb;AACH,KAND;AAOH;;AAED;;;;;;;;;AASA,SAASc,IAAT,CAAcf,MAAd,EAAsBC,EAAtB,EAA0B,CACzB;;QAGGH,W,GAAAA,W;QACAK,c,GAAAA,c;QACAE,W,GAAAA,W;QACAG,Y,GAAAA,Y;QACAE,Q,GAAAA,Q;QACAK,I,GAAAA,I","file":"index.js","sourcesContent":["/* ДЗ 5.1 - DOM Events */\n\n/**\n * Функция должна добавлять обработчик fn события eventName к элементу target\n *\n * @param {string} eventName - имя события, на которое нужно добавить обработчик\n * @param {Element} target - элемент, на который нужно добавить обработчик\n * @param {function} fn - обработчик\n */\nfunction addListener(eventName, target, fn) {\n    target.addEventListener(eventName, fn);\n}\n\n/**\n * Функция должна удалять обработчик fn события eventName у элемента target\n *\n * @param {string} eventName - имя события, для которого нужно удалить обработчик\n * @param {Element} target - элемент, у которого нужно удалить обработчик\n * @param {function} fn - обработчик\n */\nfunction removeListener(eventName, target, fn) {\n    target.removeEventListener(eventName, fn);\n}\n\n/**\n * Функция должна добавлять к target обработчик события eventName, который должен отменять действие по умолчанию\n *\n * @param {string} eventName - имя события, для которого нужно удалить обработчик\n * @param {Element} target - элемент, на который нужно добавить обработчик\n */\nfunction skipDefault(eventName, target) {\n    target.addEventListener(eventName, e => e.preventDefault());\n}\n\n/**\n * Функция должна эмулировать событие click для элемента target\n *\n * @param {Element} target - элемент, на который нужно добавить обработчик\n */\nfunction emulateClick(target) {\n    target.click();\n}\n\n/**\n * Функция должна добавить такой обработчик кликов к элементу target\n * который реагирует (вызывает fn) только на клики по элементам BUTTON внутри target\n *\n * @param {Element} target - элемент, на который нужно добавить обработчик\n * @param {function} fn - функция, которую нужно вызвать при клике на элемент BUTTON внутри target\n */\nfunction delegate(target, fn) {\n    target.onclick = function () {\n        var tar = event.target; // где был клик?\n        if( tar.tagName != 'BUTTON' ) {\n            return;\n        }\n        fn()\n    };\n}\n\n/**\n * *** Со звездочкой ***\n * Функция должна добавить такой обработчик кликов к элементу target\n * который сработает только один раз и удалится\n * Постарайтесь не создавать глобальных переменных\n *\n * @param {Element} target - элемент, на который нужно добавить обработчик\n * @param {function} fn - обработчик\n */\nfunction once(target, fn) {\n}\n\nexport {\n    addListener,\n    removeListener,\n    skipDefault,\n    emulateClick,\n    delegate,\n    once\n};\n"]}